


https://dashboard.heroku.com/apps/soundanalyzerng

https://soundanalyzerng.herokuapp.com/

https://github.com/mcoons/soundAnalyzerNg



angular is wrapped by an express server for prod deployment on Heroku

    to build prod for express server
    ng build --aot --prod

    to run prod express server on localhost:8080
    node server.js       

    to run local ng dev server on localhost:4200
    ng serve




Node Mapping

            audioSrc   <-  volume
                |
            tdAnalyser
                |
             splitter
             /      \
       gainNode     destination
           |
       analysers           




1920x1200, 1680x1050, 1280x800, and 1024x640

width = 11
halfwidth = 5

m = i - abs(halfwidth - (halfdwidth -i))



i = 0 1 2 3 4 5 6 7 8 9 10 

m = 0 1 2 3 4 5 4 3 2 1 0




TODO
_______________________________________________________________________

Add accordian functionality to options

Add multiple scenes, one for each visual, then render the current selected scene

Add testing (Karma, Jasmine)

Fix audio player lock issue - DONE

Implement @ViewChild instead of getElementById

Pick a library to use and update code - Bootstrap, BootstrapNg, Material 


Determine relation between pixels on all layers 
 a) where top of player div relates to 2d canvas  DONE
 b) cast ray from 2d pt into 3d
 c) div to 3d

Add microphone support

Add 3D visuals
    BlockPlane - DONE

Add sin() to camera movement

Add sound generation - Shepards Tone - http://jsfiddle.net/captbaritone/x893Lqk5

Volume: <input type='range' min='0' max='100' value='0' oninput=" setVolume(this.value)" ontouchstart="start();" onmousedown="start();">

_______________________________________________________________________

var min_freq = 10;
var max_freq = 40000;
var steps_per_loop = 12;
var seconds_per_loop = 5;

var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
var gainNode = audioCtx.createGain();
gainNode.connect(audioCtx.destination);

setVolume(0); // Initialize volume to match range input
var playing = false;

var step_speed = 1000 * seconds_per_loop / steps_per_loop;
var multiplier = Math.pow(2, 1/steps_per_loop)
var current_step = 0;
var oscillators = [];

function shepardLoop () {
    base_freq = min_freq;
    for(i = 0; base_freq < max_freq; i++) {
        if(oscillators[i]) oscillators[i].stop(0);
        freq = base_freq * Math.pow(multiplier, current_step);
        oscillator = audioCtx.createOscillator();
        oscillator.frequency.value = freq; // value in hertz
        oscillator.connect(gainNode);
        oscillator.start(0);
        oscillators[i] = oscillator;
        base_freq = base_freq * 2;
    }
    current_step = (current_step + 1) % steps_per_loop;
    setTimeout(shepardLoop, step_speed);
}

function start() {
    if(!playing) {
        playing = true;
        shepardLoop();
    }
}

function setVolume(volume) {
    gainNode.gain.value = volume / 100 / 12;
}
