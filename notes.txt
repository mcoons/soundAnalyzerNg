
https://dashboard.heroku.com/apps/soundanalyzerng
https://soundanalyzerng.herokuapp.com/
https://github.com/mcoons/soundAnalyzerNg



angular is wrapped by an express server for prod deployment on Heroku

    to build prod for express server
    ng build --aot --prod

    to run prod express server on localhost:8080
    node server.js       

    to run local ng dev server on localhost:4200
    ng serve


Node Mapping

            audioSrc   <-  volume
                |
            tdAnalyser
                |
             splitter
             /      \
       gainNode     destination
           |
       analysers           


AudioNode.connect(destination)
AudioNode.disconnect();

MediaStreamTrackAudioSourceNode

BiquadFilterNode





1920x1200, 1680x1050, 1280x800, and 1024x640


TODO
_______________________________________________________________________

Check for CSS cross browser changes
Push newest changes to Heroku
Test on Windows Chrome

Add more to player hide animation to conpensate for different sizes
Add sin() to camera movement on eq visual
Clean up messaging.
Implement @ViewChild instead of getElementById
Add accordian functionality to options
Pick a library to use and update code - Bootstrap, BootstrapNg, Material 
Make variables private and assign types where possible
Do something cool with Title
Add auto change of visual between songs.  User selectable list?

Add microphone support

Add multiple scenes, one for each visual, then render the current selected scene

Add testing (Karma, Jasmine)

Determine relation between pixels on all layers 
 a) where top of player div relates to 2d canvas  DONE
 b) cast ray from 2d pt into 3d
 c) div to 3d






Add sound generation - Shepards Tone - http://jsfiddle.net/captbaritone/x893Lqk5

Volume: <input type='range' min='0' max='100' value='0' oninput=" setVolume(this.value)" ontouchstart="start();" onmousedown="start();">

_______________________________________________________________________

var min_freq = 10;
var max_freq = 40000;
var steps_per_loop = 12;
var seconds_per_loop = 5;

var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
var gainNode = audioCtx.createGain();
gainNode.connect(audioCtx.destination);

setVolume(0); // Initialize volume to match range input
var playing = false;

var step_speed = 1000 * seconds_per_loop / steps_per_loop;
var multiplier = Math.pow(2, 1/steps_per_loop)
var current_step = 0;
var oscillators = [];

function shepardLoop () {
    base_freq = min_freq;
    for(i = 0; base_freq < max_freq; i++) {
        if(oscillators[i]) oscillators[i].stop(0);
        freq = base_freq * Math.pow(multiplier, current_step);
        oscillator = audioCtx.createOscillator();
        oscillator.frequency.value = freq; // value in hertz
        oscillator.connect(gainNode);
        oscillator.start(0);
        oscillators[i] = oscillator;
        base_freq = base_freq * 2;
    }
    current_step = (current_step + 1) % steps_per_loop;
    setTimeout(shepardLoop, step_speed);
}

function start() {
    if(!playing) {
        playing = true;
        shepardLoop();
    }
}

function setVolume(volume) {
    gainNode.gain.value = volume / 100 / 12;
}
